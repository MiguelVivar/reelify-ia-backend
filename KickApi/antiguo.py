from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.responses import StreamingResponse
from kickapi import KickAPI
import asyncio
from typing import Optional
import uvicorn
import subprocess
import tempfile
import os
import requests
from urllib.parse import urlparse
import shutil
import time
import threading
import hashlib
import random
import string
from pydantic import BaseModel

app = FastAPI(
    title="Kick API",
    description="API para obtener clips y videos de canales de Kick.com",
    version="1.0.0"
)

kick_api = KickAPI()

# Almac√©n en memoria para videos procesados (en producci√≥n usar Redis o BD)
video_cache = {}
cache_lock = threading.Lock()

# Directorio para videos convertidos
CONVERTED_VIDEOS_DIR = "converted_videos"
os.makedirs(CONVERTED_VIDEOS_DIR, exist_ok=True)

# Modelos Pydantic
class OptimizedVideoRequest(BaseModel):
    video_url: str
    quality: str = "medium"  # low, medium, high, ultra, tiktok, instagram, youtube
    platform: str = "general"  # general, tiktok, instagram, youtube, facebook
    
    # Nuevas opciones avanzadas
    add_subtitles: bool = False  # Agregar subt√≠tulos autom√°ticos con Whisper
    subtitle_language: str = "auto"  # Idioma de subt√≠tulos (auto, es, en, fr, etc.)
    
    # Filtros de mejora de video
    apply_denoise: bool = False  # Reducci√≥n de ruido
    apply_sharpen: bool = False  # Mejora de nitidez
    sharpen_strength: float = 0.3  # Intensidad del filtro de nitidez (0.1-1.0)
    apply_stabilization: bool = False  # Estabilizaci√≥n de video
    
    # Correcci√≥n de color
    apply_color_correction: bool = False
    brightness: float = 0.0  # -1.0 a 1.0
    contrast: float = 1.0    # 0.1 a 3.0
    saturation: float = 1.0  # 0.0 a 3.0
    gamma: float = 1.0       # 0.1 a 3.0
    
    # Configuraciones t√©cnicas avanzadas
    custom_bitrate: str = None  # Bitrate personalizado (ej: "5000k")
    target_fps: int = 30        # FPS objetivo
    
    # Opciones de audio
    audio_enhancement: bool = False  # Mejora de audio con compresi√≥n y limitaci√≥n

class VideoFilterOptions(BaseModel):
    denoise: bool = False
    sharpen: bool = False
    sharpen_strength: float = 0.3
    stabilize: bool = False
    color_correction: bool = False
    brightness: float = 0.0
    contrast: float = 1.0
    saturation: float = 1.0
    gamma: float = 1.0

# Funci√≥n auxiliar para verificar si ffmpeg est√° disponible
def check_ffmpeg():
    try:
        result = subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True, text=True)
        print(f"‚úÖ FFmpeg disponible: {result.stdout.split()[2] if len(result.stdout.split()) > 2 else 'version detectada'}")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå FFmpeg no encontrado. Instala FFmpeg para usar funciones de conversi√≥n.")
        return False

# Funci√≥n auxiliar para verificar si whisper est√° disponible (para subt√≠tulos)
def check_whisper():
    try:
        subprocess.run(['whisper', '--help'], capture_output=True, check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False

# Funci√≥n para analizar video y obtener informaci√≥n t√©cnica
def analyze_video(input_path: str) -> dict:
    """
    Analiza un video y retorna informaci√≥n t√©cnica detallada
    """
    try:
        cmd = [
            'ffprobe', '-v', 'quiet', '-print_format', 'json', '-show_format', 
            '-show_streams', input_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        
        import json
        data = json.loads(result.stdout)
        
        video_info = {
            "duration": 0,
            "width": 0,
            "height": 0,
            "fps": 0,
            "bitrate": 0,
            "has_audio": False,
            "codec": "unknown",
            "aspect_ratio": "unknown"
        }
        
        # Extraer informaci√≥n del formato
        if 'format' in data:
            video_info["duration"] = float(data['format'].get('duration', 0))
            video_info["bitrate"] = int(data['format'].get('bit_rate', 0))
        
        # Extraer informaci√≥n de streams
        for stream in data.get('streams', []):
            if stream.get('codec_type') == 'video':
                video_info["width"] = stream.get('width', 0)
                video_info["height"] = stream.get('height', 0)
                video_info["codec"] = stream.get('codec_name', 'unknown')
                
                # Calcular FPS
                fps_str = stream.get('r_frame_rate', '0/1')
                if '/' in fps_str:
                    num, den = fps_str.split('/')
                    video_info["fps"] = int(num) / int(den) if int(den) > 0 else 0
                
                # Calcular aspect ratio
                if video_info["width"] > 0 and video_info["height"] > 0:
                    ratio = video_info["width"] / video_info["height"]
                    video_info["aspect_ratio"] = f"{video_info['width']}:{video_info['height']}"
            
            elif stream.get('codec_type') == 'audio':
                video_info["has_audio"] = True
        
        print(f"üìä An√°lisis de video: {video_info['width']}x{video_info['height']}, {video_info['fps']:.1f}fps, {video_info['duration']:.1f}s")
        return video_info
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error analizando video: {e}")
        return {
            "duration": 0, "width": 0, "height": 0, "fps": 0, 
            "bitrate": 0, "has_audio": False, "codec": "unknown", "aspect_ratio": "unknown"
        }

# Funci√≥n para extraer nombre del archivo desde URL
def extract_filename_from_url(url: str) -> str:
    """
    Extrae el nombre del archivo desde una URL
    Ejemplo: https://storage.asumarket.com/agentetiktok/clip_01K3ZE1Y7MH8CBRQAFR206V4AM
    Resultado: clip_01K3ZE1Y7MH8CBRQAFR206V4AM
    """
    try:
        # Parsear la URL
        parsed = urlparse(url)
        # Obtener el √∫ltimo segmento del path
        path_segments = parsed.path.strip('/').split('/')
        if path_segments and path_segments[-1]:
            filename = path_segments[-1]
            # Remover extensi√≥n si existe
            if '.' in filename:
                filename = filename.rsplit('.', 1)[0]
            return filename
        else:
            # Fallback: usar un hash de la URL
            import hashlib
            return hashlib.md5(url.encode()).hexdigest()[:12]
    except Exception as e:
        print(f"‚ö†Ô∏è Error extrayendo filename de URL: {e}")
        # Fallback: usar timestamp
        return str(int(time.time()))

# Funci√≥n para generar subt√≠tulos autom√°ticos con Whisper (ASYNC y con timeout)
def generate_subtitles_with_whisper(input_path: str, output_dir: str, language: str = "auto") -> str:
    """
    Genera subt√≠tulos autom√°ticos usando OpenAI Whisper con timeout y mejor manejo de errores
    """
    try:
        if not check_whisper():
            print("‚ö†Ô∏è Whisper no est√° disponible. Saltando generaci√≥n de subt√≠tulos.")
            return None
        
        print(f"üé§ Generando subt√≠tulos autom√°ticos con Whisper...")
        
        # Comando para generar subt√≠tulos con Whisper optimizado
        cmd = [
            'whisper', input_path,
            '--output_dir', output_dir,
            '--output_format', 'srt',
            '--model', 'tiny',  # Usar modelo tiny para mayor velocidad
            '--fp16', 'False',   # Compatibilidad con m√°s hardware
            '--task', 'transcribe',  # Solo transcribir, no traducir
            '--no_speech_threshold', '0.6',  # Mejorar detecci√≥n de silencio
            '--condition_on_previous_text', 'False'  # Reducir dependencias
        ]
        
        if language != "auto" and language in ['es', 'en', 'fr', 'de', 'it', 'pt']:
            cmd.extend(['--language', language])
        
        # Ejecutar con timeout de 60 segundos
        print(f"‚è±Ô∏è Procesando audio con Whisper (timeout: 60s)...")
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
        
        if result.returncode != 0:
            print(f"‚ö†Ô∏è Whisper termin√≥ con c√≥digo {result.returncode}")
            if result.stderr:
                print(f"Whisper stderr: {result.stderr[:200]}")
            return None
        
        # Buscar archivo SRT generado
        base_name = os.path.splitext(os.path.basename(input_path))[0]
        srt_path = os.path.join(output_dir, f"{base_name}.srt")
        
        if os.path.exists(srt_path) and os.path.getsize(srt_path) > 0:
            print(f"‚úÖ Subt√≠tulos generados: {os.path.basename(srt_path)} ({os.path.getsize(srt_path)} bytes)")
            return srt_path
        else:
            print("‚ö†Ô∏è No se encontraron subt√≠tulos generados o archivo vac√≠o")
            return None
            
    except subprocess.TimeoutExpired:
        print("‚ùå Timeout: Whisper tard√≥ m√°s de 60 segundos. Continuando sin subt√≠tulos.")
        return None
    except Exception as e:
        print(f"‚ùå Error generando subt√≠tulos: {e}")
        return None

# Funci√≥n para aplicar filtros avanzados de video
def apply_advanced_video_filters(input_path: str, output_path: str, filters: dict):
    """
    Aplica filtros avanzados de video usando FFmpeg
    """
    try:
        filter_complex_parts = []
        
        # Filtro de estabilizaci√≥n
        if filters.get("stabilize", False):
            filter_complex_parts.append("vidstabdetect=shakiness=10:accuracy=10:result=/tmp/transforms.trf")
            filter_complex_parts.append("vidstabtransform=input=/tmp/transforms.trf:zoom=0:smoothing=10")
        
        # Filtro de reducci√≥n de ruido
        if filters.get("denoise", False):
            filter_complex_parts.append("nlmeans=s=2.0:p=7:r=15")
        
        # Filtro de mejora de nitidez
        if filters.get("sharpen", False):
            sharpen_strength = filters.get("sharpen_strength", 0.5)
            filter_complex_parts.append(f"unsharp=5:5:{sharpen_strength}:5:5:{sharpen_strength}")
        
        # Correcci√≥n de color
        if filters.get("color_correction", False):
            brightness = filters.get("brightness", 0.0)
            contrast = filters.get("contrast", 1.0)
            saturation = filters.get("saturation", 1.0)
            filter_complex_parts.append(f"eq=brightness={brightness}:contrast={contrast}:saturation={saturation}")
        
        # Aplicar filtros si existen
        if filter_complex_parts:
            filter_string = ",".join(filter_complex_parts)
            cmd = [
                'ffmpeg', '-i', input_path,
                '-vf', filter_string,
                '-c:v', 'libx264', '-crf', '18', '-preset', 'medium',
                '-c:a', 'aac', '-b:a', '192k',
                output_path, '-y'
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            return True
        
        return False
        
    except Exception as e:
        print(f"‚ùå Error aplicando filtros avanzados: {e}")
        return False

# Funci√≥n para convertir video a formato vertical 9:16 usando FFmpeg ULTRA OPTIMIZADA
def convert_to_vertical_format_optimized(input_path: str, output_path: str, quality: str = "medium", options: dict = None):
    """
    Convierte un video a formato vertical 9:16 con fondo difuminado usando FFmpeg
    Versi√≥n ULTRA OPTIMIZADA con mejores configuraciones de calidad, filtros avanzados y subt√≠tulos
    
    Args:
        input_path: Ruta del video de entrada
        output_path: Ruta del video de salida
        quality: Calidad de salida (low, medium, high, ultra, tiktok, instagram, youtube)
        options: Diccionario con opciones adicionales:
            - add_subtitles: bool - Agregar subt√≠tulos autom√°ticos
            - subtitle_language: str - Idioma de subt√≠tulos (auto, es, en, etc.)
            - apply_filters: dict - Filtros adicionales (denoise, sharpen, stabilize, etc.)
            - custom_bitrate: str - Bitrate personalizado
            - target_fps: int - FPS objetivo
    """
    try:
        # Opciones por defecto
        if options is None:
            options = {}
        
        # Analizar video de entrada
        video_info = analyze_video(input_path)
        print(f"üìä Video original: {video_info['width']}x{video_info['height']}, {video_info['fps']:.1f}fps")
        
        # Configuraciones optimizadas y expandidas
        quality_settings = {
            "low": {
                "crf": "28", 
                "preset": "fast", 
                "scale": "720:1280",
                "bitrate": "1200k",
                "maxrate": "1800k",
                "bufsize": "2400k",
                "audio_bitrate": "96k"
            },
            "medium": {
                "crf": "23", 
                "preset": "medium", 
                "scale": "1080:1920",
                "bitrate": "2800k",
                "maxrate": "4200k", 
                "bufsize": "5600k",
                "audio_bitrate": "128k"
            },
            "high": {
                "crf": "20", 
                "preset": "medium", 
                "scale": "1080:1920",
                "bitrate": "5000k",
                "maxrate": "7500k",
                "bufsize": "10000k",
                "audio_bitrate": "192k"
            },
            "ultra": {
                "crf": "16", 
                "preset": "slow", 
                "scale": "1080:1920",
                "bitrate": "8000k",
                "maxrate": "12000k",
                "bufsize": "16000k",
                "audio_bitrate": "256k"
            },
            "tiktok": {
                "crf": "22",
                "preset": "medium",
                "scale": "1080:1920", 
                "bitrate": "2500k",
                "maxrate": "3500k",
                "bufsize": "5000k",
                "audio_bitrate": "128k"
            },
            "instagram": {
                "crf": "21",
                "preset": "medium", 
                "scale": "1080:1920",
                "bitrate": "3200k",
                "maxrate": "4800k",
                "bufsize": "6400k",
                "audio_bitrate": "160k"
            },
            "youtube": {
                "crf": "20",
                "preset": "medium",
                "scale": "1080:1920",
                "bitrate": "4000k",
                "maxrate": "6000k",
                "bufsize": "8000k",
                "audio_bitrate": "192k"
            }
        }
        
        settings = quality_settings.get(quality, quality_settings["medium"])
        target_width, target_height = map(int, settings["scale"].split(":"))
        
        # Usar bitrate personalizado si se especifica
        if options.get("custom_bitrate"):
            settings["bitrate"] = options["custom_bitrate"]
            settings["maxrate"] = str(int(options["custom_bitrate"].replace('k', '')) * 1.5) + 'k'
        
        # Generar subt√≠tulos si se solicita
        # Subt√≠tulos deshabilitados temporalmente para evitar bloqueos del servidor
        subtitle_file = None
        # if options.get("add_subtitles", False):
        #     temp_dir = os.path.dirname(output_path)
        #     subtitle_language = options.get("subtitle_language", "auto")
        #     subtitle_file = generate_subtitles_with_whisper(input_path, temp_dir, subtitle_language)
        
        # Construir filtro complejo optimizado
        filter_parts = []
        
        # Input principal
        filter_parts.append("[0:v]split=2[bg][main]")
        
        # Fondo difuminado mejorado
        bg_filter = (
            f"[bg]scale={target_width*1.5}:{target_height*1.5}:force_original_aspect_ratio=increase,"
            f"crop={target_width}:{target_height}:({target_width*1.5}-{target_width})/2:({target_height*1.5}-{target_height})/2,"
            f"gblur=sigma=15:steps=3[blurred_bg]"
        )
        filter_parts.append(bg_filter)
        
        # Video principal con mejores escalado
        main_filter = (
            f"[main]scale='if(gt(iw/ih,{target_width}/{target_height}),{target_width},-1)':'if(gt(iw/ih,{target_width}/{target_height}),-1,{target_height})':flags=lanczos,"
            f"pad={target_width}:{target_height}:({target_width}-iw)/2:({target_height}-ih)/2:color=black[main_scaled]"
        )
        filter_parts.append(main_filter)
        
        # Aplicar filtros adicionales al video principal si se solicitan
        if options.get("apply_filters"):
            filters = options["apply_filters"]
            additional_filters = []
            
            if filters.get("denoise", False):
                additional_filters.append("hqdn3d=2:1:2:1")
            
            if filters.get("sharpen", False):
                strength = filters.get("sharpen_strength", 0.3)
                additional_filters.append(f"unsharp=5:5:{strength}:5:5:{strength}")
            
            if filters.get("color_correction", False):
                brightness = filters.get("brightness", 0.0)
                contrast = filters.get("contrast", 1.0)
                saturation = filters.get("saturation", 1.0)
                gamma = filters.get("gamma", 1.0)
                additional_filters.append(f"eq=brightness={brightness}:contrast={contrast}:saturation={saturation}:gamma={gamma}")
            
            if additional_filters:
                # Modificar el filtro principal para incluir mejoras
                main_filter = main_filter.replace("[main_scaled]", f",{','.join(additional_filters)}[main_scaled]")
                filter_parts[-1] = main_filter
        
        # Componer resultado final
        filter_parts.append("[blurred_bg][main_scaled]overlay=0:0[video_out]")
        
        # Agregar subt√≠tulos si est√°n disponibles (M√âTODO SIMPLIFICADO)
        if subtitle_file and os.path.exists(subtitle_file):
            # Usar m√©todo m√°s simple de subt√≠tulos para evitar problemas de escape
            print(f"üìù Integrando subt√≠tulos: {os.path.basename(subtitle_file)}")
            # En lugar de filtro complejo, usar archivo de subt√≠tulos separado
            subtitle_filter = f"subtitles='{subtitle_file.replace(chr(92), '/')}':force_style='FontName=Arial,FontSize=18,PrimaryColour=&Hffffff,OutlineColour=&H000000,Outline=2,Shadow=1'"
            
            # Modificar el √∫ltimo filtro para incluir subt√≠tulos
            if len(filter_parts) > 0:
                last_filter = filter_parts[-1]
                # A√±adir subt√≠tulos al final del pipeline
                filter_parts[-1] = last_filter.replace("[video_out]", f"[video_temp];[video_temp]{subtitle_filter}[video_out]")
            
            final_map = "[video_out]"
        else:
            final_map = "[video_out]"
        
        filter_complex = ";".join(filter_parts)
        
        # FPS objetivo
        target_fps = options.get("target_fps", 30)
        
        # Comando FFmpeg optimizado con configuraciones profesionales
        ffmpeg_cmd = [
            'ffmpeg', '-i', input_path,
            '-filter_complex', filter_complex,
            '-map', final_map,
            '-map', '0:a?',  # Audio opcional
            
            # Configuraciones de video H.264 optimizadas
            '-c:v', 'libx264',
            '-profile:v', 'high',
            '-level', '4.2',
            '-x264-params', 'me=hex:subme=8:ref=3:bframes=3:b-pyramid=normal:weightb=1:analyse=all:8x8dct=1:deadzone-inter=21:deadzone-intra=11:me-range=24:chroma-me=1:cabac=1:ref=3:deblock=1:analyse=0x3:0x113:subme=8:psy=1:psy_rd=1.00:0.00:mixed_ref=1:me_range=16:chroma_me=1:trellis=2:8x8dct=1:cqm=0:deadzone=21,11:fast_pskip=1:chroma_qp_offset=-2:threads=auto:lookahead_threads=auto:sliced_threads=0:nr=0:decimate=1:interlaced=0:bluray_compat=0:constrained_intra=0:fgo=0',
            
            # Control de calidad
            '-crf', settings["crf"],
            '-maxrate', settings["maxrate"],
            '-bufsize', settings["bufsize"],
            '-preset', settings["preset"],
            
            # Configuraciones de framerate
            '-r', str(target_fps),
            '-g', str(target_fps * 2),  # GOP size
            '-keyint_min', str(target_fps),
            
            # Configuraciones de audio mejoradas
            '-c:a', 'aac',
            '-b:a', settings["audio_bitrate"],
            '-ar', '48000',  # Sample rate profesional
            '-ac', '2',
            '-af', 'acompressor=threshold=0.5:ratio=3:attack=10:release=80,alimiter=level_in=1:level_out=0.9:limit=0.95',  # Compresor y limitador de audio
            
            # Configuraciones de p√≠xel y compatibilidad
            '-pix_fmt', 'yuv420p',
            '-colorspace', 'bt709',
            '-color_primaries', 'bt709',
            '-color_trc', 'bt709',
            '-movflags', '+faststart+frag_keyframe+separate_moof+omit_tfhd_offset+disable_chpl',
            
            # Optimizaciones de rendimiento
            '-threads', '0',
            '-avoid_negative_ts', 'make_zero',
            '-shortest',
            '-fflags', '+genpts+igndts',
            
            # Metadatos optimizados
            '-metadata', f'title=Vertical Video - {quality.upper()}',
            '-metadata', f'comment=Processed with KickAPI - Quality: {quality}',
            
            output_path, '-y'
        ]
        
        print(f"üîÑ Convirtiendo video con calidad ULTRA OPTIMIZADA: {quality}")
        print(f"üéØ Configuraci√≥n: {settings['scale']}, {settings['bitrate']}, CRF:{settings['crf']}")
        if subtitle_file:
            print(f"üìù Subt√≠tulos incluidos: {os.path.basename(subtitle_file)}")
        
        # Ejecutar comando con informaci√≥n de progreso
        process = subprocess.Popen(
            ffmpeg_cmd, 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE, 
            text=True,
            universal_newlines=True
        )
        
        # Monitorear progreso
        stderr_output = ""
        while True:
            output = process.stderr.readline()
            if output == '' and process.poll() is not None:
                break
            if output:
                stderr_output += output
                if 'time=' in output:
                    # Extraer tiempo de progreso
                    for part in output.split():
                        if part.startswith('time='):
                            current_time = part.split('=')[1]
                            print(f"‚è±Ô∏è Progreso: {current_time}", end='\r')
        
        rc = process.poll()
        
        if rc == 0:
            # Verificar que el archivo se cre√≥ correctamente
            if os.path.exists(output_path) and os.path.getsize(output_path) > 0:
                final_size = os.path.getsize(output_path)
                print(f"\n‚úÖ Conversi√≥n ULTRA OPTIMIZADA completada exitosamente")
                print(f"üìÅ Archivo final: {final_size / (1024*1024):.1f} MB")
                
                # Analizar video final
                final_info = analyze_video(output_path)
                print(f"üìä Video final: {final_info['width']}x{final_info['height']}, {final_info['fps']:.1f}fps")
                
                # Limpiar archivos temporales de subt√≠tulos
                if subtitle_file and os.path.exists(subtitle_file):
                    try:
                        os.remove(subtitle_file)
                        print(f"üßπ Archivo temporal de subt√≠tulos eliminado")
                    except:
                        pass
                
                return True
            else:
                print(f"\n‚ùå Error: Archivo de salida no v√°lido")
                return False
        else:
            print(f"\n‚ùå Error en FFmpeg (c√≥digo {rc})")
            if stderr_output:
                print(f"FFmpeg stderr: {stderr_output[-500:]}")  # Solo √∫ltimos 500 caracteres
            return False
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error en FFmpeg: {e}")
        if e.stderr:
            print(f"FFmpeg stderr: {e.stderr[-300:]}")  # Solo √∫ltimos 300 caracteres
        
        # Intentar sin subt√≠tulos si el error puede ser por subt√≠tulos
        if options.get("add_subtitles", False):
            print("üîß Reintentando conversi√≥n sin subt√≠tulos...")
            options_no_subs = options.copy()
            options_no_subs["add_subtitles"] = False
            return convert_to_vertical_format_optimized(input_path, output_path, quality, options_no_subs)
        else:
            # Intentar con configuraci√≥n m√°s simple como fallback
            print("üîß Intentando conversi√≥n con configuraci√≥n simplificada...")
            return convert_to_vertical_simple_fallback(input_path, output_path, quality)
        
    except Exception as e:
        print(f"‚ùå Error converting video: {e}")
        
        # Intentar fallback si hay subt√≠tulos
        if options and options.get("add_subtitles", False):
            print("üîß Reintentando sin subt√≠tulos debido a error...")
            options_no_subs = options.copy()
            options_no_subs["add_subtitles"] = False
            return convert_to_vertical_format_optimized(input_path, output_path, quality, options_no_subs)
        
        return False

# Funci√≥n fallback con filtro m√°s simple
def convert_to_vertical_simple_fallback(input_path: str, output_path: str, quality: str = "medium"):
    """Fallback con filtro m√°s simple si el principal falla"""
    try:
        print("üîß Iniciando conversi√≥n fallback simplificada...")
        
        # Configuraciones b√°sicas pero efectivas
        quality_settings = {
            "low": {"crf": "28", "preset": "fast", "scale": "720:1280", "bitrate": "1200k"},
            "medium": {"crf": "24", "preset": "medium", "scale": "1080:1920", "bitrate": "2800k"},
            "high": {"crf": "20", "preset": "medium", "scale": "1080:1920", "bitrate": "5000k"},
            "ultra": {"crf": "18", "preset": "medium", "scale": "1080:1920", "bitrate": "6000k"},
            "tiktok": {"crf": "23", "preset": "medium", "scale": "1080:1920", "bitrate": "2500k"},
            "instagram": {"crf": "22", "preset": "medium", "scale": "1080:1920", "bitrate": "3200k"},
            "youtube": {"crf": "20", "preset": "medium", "scale": "1080:1920", "bitrate": "4000k"}
        }
        
        settings = quality_settings.get(quality, quality_settings["medium"])
        target_width, target_height = map(int, settings["scale"].split(":"))
        
        # Filtro muy simple pero efectivo: solo escalar y agregar padding negro
        video_filter = f'scale=\'if(gt(iw/ih,{target_width}/{target_height}),{target_width},-1)\':\'if(gt(iw/ih,{target_width}/{target_height}),-1,{target_height})\',pad={target_width}:{target_height}:({target_width}-iw)/2:({target_height}-ih)/2:color=black'
        
        # Comando FFmpeg simplificado pero optimizado
        ffmpeg_cmd = [
            'ffmpeg', '-i', input_path,
            '-vf', video_filter,
            '-c:v', 'libx264',
            '-profile:v', 'high',
            '-level', '4.2',
            '-crf', settings["crf"],
            '-preset', settings["preset"],
            '-c:a', 'aac',
            '-b:a', '128k',
            '-ar', '48000',
            '-ac', '2',
            '-r', '30',
            '-pix_fmt', 'yuv420p',
            '-movflags', '+faststart',
            '-threads', '0',
            '-y', output_path
        ]
        
        print(f"üîß Ejecutando conversi√≥n fallback...")
        result = subprocess.run(ffmpeg_cmd, capture_output=True, text=True, timeout=300)  # 5 min timeout
        
        if result.returncode == 0 and os.path.exists(output_path) and os.path.getsize(output_path) > 0:
            print(f"‚úÖ Conversi√≥n fallback completada exitosamente")
            return True
        else:
            print(f"‚ùå Error en fallback FFmpeg (c√≥digo {result.returncode})")
            if result.stderr:
                print(f"FFmpeg stderr: {result.stderr[-200:]}")
            return False
        
    except subprocess.TimeoutExpired:
        print("‚ùå Timeout en conversi√≥n fallback (5 minutos)")
        return False
    except Exception as e:
        print(f"‚ùå Error en fallback: {e}")
        return False

# Funci√≥n para convertir video a formato vertical 9:16
def convert_to_vertical_format(input_path: str, output_path: str, quality: str = "medium"):
    """Convierte un video a formato vertical 9:16 con fondo difuminado"""
    try:
        # Usar la versi√≥n optimizada directamente
        print("üîÑ Iniciando conversi√≥n optimizada con FFmpeg...")
        return convert_to_vertical_format_optimized(input_path, output_path, quality)
        
    except Exception as e:
        print(f"‚ùå Error converting video: {e}")
        return False

# Funci√≥n SIMPLIFICADA y ROBUSTA para evitar bloqueos del servidor
async def convert_to_vertical_format_simple(input_path: str, output_path: str, quality: str = "medium"):
    """
    Versi√≥n simplificada y robusta de conversi√≥n a formato vertical
    """
    try:
        print(f"üé¨ Iniciando conversi√≥n simplificada...")
        
        # Comando FFmpeg b√°sico pero efectivo
        cmd = [
            "ffmpeg", "-i", input_path, "-y",
            "-vf", "scale=1080:1920:force_original_aspect_ratio=decrease,pad=1080:1920:(ow-iw)/2:(oh-ih)/2",
            "-c:v", "libx264", "-preset", "medium", "-crf", "23",
            "-c:a", "aac", "-b:a", "128k",
            output_path
        ]
        
        print(f"üìã Ejecutando: {' '.join(cmd[:5])}...")
        
        # Ejecutar con timeout
        process = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        stdout, stderr = await asyncio.wait_for(process.communicate(), timeout=120)
        
        if process.returncode == 0:
            if os.path.exists(output_path) and os.path.getsize(output_path) > 0:
                print(f"‚úÖ Conversi√≥n completada: {os.path.getsize(output_path) / (1024*1024):.1f} MB")
                return True
        
        error_msg = stderr.decode('utf-8', errors='ignore') if stderr else "Error desconocido"
        print(f"‚ùå Error FFmpeg: {error_msg[:200]}")
        return False
        
    except asyncio.TimeoutError:
        print("‚ö†Ô∏è Timeout en conversi√≥n")
        return False
    except Exception as e:
        print(f"‚ùå Error en conversi√≥n: {str(e)}")
        return False

# Funci√≥n para convertir m3u8 a mp4
async def convert_m3u8_to_mp4(m3u8_url: str, output_path: str):
    cmd = [
        'ffmpeg', '-i', m3u8_url, 
        '-c', 'copy', '-bsf:a', 'aac_adtstoasc', 
        '-f', 'mp4', output_path, '-y'
    ]
    process = await asyncio.create_subprocess_exec(
        *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
    )
    await process.communicate()
    return process.returncode == 0

# Funci√≥n para convertir m3u8 a mp3
async def convert_m3u8_to_mp3(m3u8_url: str, output_path: str):
    cmd = [
        'ffmpeg', '-i', m3u8_url, 
        '-vn', '-acodec', 'mp3', '-ab', '192k', 
        output_path, '-y'
    ]
    process = await asyncio.create_subprocess_exec(
        *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
    )
    await process.communicate()
    return process.returncode == 0

# Funci√≥n para generar archivo de respuesta streaming
def generate_file_stream(file_path: str):
    def iterfile():
        with open(file_path, 'rb') as file:
            while chunk := file.read(8192):
                yield chunk
    return iterfile()

# Funciones para gesti√≥n de cache de videos
def clean_old_videos():
    """Limpia videos antiguos (m√°s de 1 hora)"""
    try:
        current_time = time.time()
        with cache_lock:
            expired_keys = []
            for video_id, data in video_cache.items():
                if current_time - data.get('created_at', 0) > 3600:  # 1 hora
                    expired_keys.append(video_id)
                    # Eliminar directorio temporal completo si existe
                    temp_dir = data.get('temp_dir')
                    if temp_dir and os.path.exists(temp_dir):
                        try:
                            shutil.rmtree(temp_dir)
                            print(f"üóëÔ∏è Directorio temporal eliminado: {temp_dir}")
                        except Exception as e:
                            print(f"‚ö†Ô∏è Error eliminando directorio temporal: {e}")
                    
                    # Fallback: eliminar archivo individual si existe
                    file_path = data.get('file_path')
                    if file_path and os.path.exists(file_path):
                        try:
                            os.remove(file_path)
                            print(f"üóëÔ∏è Archivo eliminado: {file_path}")
                        except:
                            pass
            
            # Eliminar del cache
            for key in expired_keys:
                del video_cache[key]
                print(f"üßπ Cache limpiado: {key}")
                
    except Exception as e:
        print(f"‚ö†Ô∏è Error limpiando cache: {e}")

def start_cleanup_thread():
    """Inicia hilo de limpieza autom√°tica"""
    def cleanup_worker():
        while True:
            time.sleep(300)  # Ejecutar cada 5 minutos
            clean_old_videos()
    
    cleanup_thread = threading.Thread(target=cleanup_worker, daemon=True)
    cleanup_thread.start()
    print("üßπ Hilo de limpieza iniciado")

def extract_filename_from_url(url: str) -> str:
    """Extrae un nombre de archivo √∫nico de la URL"""
    try:
        parsed = urlparse(url)
        path = parsed.path
        
        # Para URLs de Kick.com clips
        if 'kick.com' in parsed.netloc and '/clips/' in path:
            # Extraer el ID del clip de la URL
            clip_id = path.split('/clips/')[-1].split('?')[0].split('#')[0]
            if clip_id:
                return clip_id  # Retornar directamente el ID sin prefijo
        
        # Para URLs de almacenamiento (como asumarket.com)
        if path and path != '/':
            filename = path.split('/')[-1].split('?')[0].split('#')[0]
            if filename:
                # Si ya contiene el formato deseado, devolverlo tal como est√°
                if filename.startswith('clip_') and len(filename) > 10:
                    return filename
                # Si no tiene extensi√≥n, usarlo directamente
                if '.' not in filename:
                    return filename
                # Si tiene extensi√≥n, quitarla
                else:
                    return filename.rsplit('.', 1)[0]
        
        # Si no se puede extraer, usar hash de la URL
        url_hash = hashlib.md5(url.encode()).hexdigest()[:12]
        return f"video_{url_hash}"
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error extrayendo nombre de URL: {e}")
        # Fallback: usar timestamp
        return f"video_{int(time.time())}"

def generate_unique_id(base_name: str) -> str:
    """Genera un ID √∫nico basado en el nombre base"""
    # Generar un ID similar al formato solicitado: clip_01K3ZE1Y7MH8CBRQAFR206V4AM
    unique_part = ''.join(random.choices(string.ascii_uppercase + string.digits, k=26))
    return f"{base_name}_{unique_part}"

def optimize_for_platform(quality: str, platform: str) -> str:
    """Optimiza la calidad seg√∫n la plataforma espec√≠fica"""
    platform_mappings = {
        "tiktok": "tiktok",
        "instagram": "instagram", 
        "facebook": "instagram",  # Facebook Reels usa configuraci√≥n similar a Instagram
        "youtube": "youtube",     # YouTube Shorts optimizado
        "general": quality
    }
    
    return platform_mappings.get(platform.lower(), quality)

def get_processing_options_from_request(request: OptimizedVideoRequest) -> dict:
    """
    Convierte el request en opciones de procesamiento para FFmpeg
    """
    options = {
        "add_subtitles": request.add_subtitles,
        "subtitle_language": request.subtitle_language,
        "target_fps": request.target_fps,
        "custom_bitrate": request.custom_bitrate,
    }
    
    # Configurar filtros de video
    apply_filters = {}
    
    if request.apply_denoise:
        apply_filters["denoise"] = True
    
    if request.apply_sharpen:
        apply_filters["sharpen"] = True
        apply_filters["sharpen_strength"] = max(0.1, min(1.0, request.sharpen_strength))
    
    if request.apply_stabilization:
        apply_filters["stabilize"] = True
    
    if request.apply_color_correction:
        apply_filters["color_correction"] = True
        apply_filters["brightness"] = max(-1.0, min(1.0, request.brightness))
        apply_filters["contrast"] = max(0.1, min(3.0, request.contrast))
        apply_filters["saturation"] = max(0.0, min(3.0, request.saturation))
        apply_filters["gamma"] = max(0.1, min(3.0, request.gamma))
    
    if apply_filters:
        options["apply_filters"] = apply_filters
    
    return options

# Iniciar limpieza autom√°tica
start_cleanup_thread()

@app.get("/")
async def root():
    return {"message": "Kick API - Obt√©n clips y videos de canales de Kick.com"}

@app.get("/ffmpeg-info")
async def get_ffmpeg_info():
    """
    üîß INFORMACI√ìN DETALLADA DE FFMPEG - Capacidades y configuraci√≥n del sistema
    
    Retorna informaci√≥n detallada sobre las capacidades de FFmpeg instalado
    """
    info = {
        "ffmpeg_available": check_ffmpeg(),
        "whisper_available": check_whisper(),
        "system_info": {
            "os": "Windows" if os.name == 'nt' else "Unix/Linux",
            "cpu_cores": os.cpu_count(),
        }
    }
    
    if info["ffmpeg_available"]:
        try:
            # Obtener versi√≥n de FFmpeg
            result = subprocess.run(['ffmpeg', '-version'], capture_output=True, text=True)
            lines = result.stdout.split('\n')
            version_line = lines[0] if lines else "Unknown"
            
            # Obtener codecs disponibles
            codecs_result = subprocess.run(['ffmpeg', '-codecs'], capture_output=True, text=True)
            
            # Verificar codecs espec√≠ficos
            h264_available = 'libx264' in codecs_result.stdout
            aac_available = 'aac' in codecs_result.stdout
            
            # Obtener filtros disponibles
            filters_result = subprocess.run(['ffmpeg', '-filters'], capture_output=True, text=True)
            
            # Verificar filtros espec√≠ficos
            filters_available = {
                "gblur": "gblur" in filters_result.stdout,
                "unsharp": "unsharp" in filters_result.stdout,
                "nlmeans": "nlmeans" in filters_result.stdout,
                "hqdn3d": "hqdn3d" in filters_result.stdout,
                "eq": "eq" in filters_result.stdout,
                "scale": "scale" in filters_result.stdout,
                "subtitles": "subtitles" in filters_result.stdout,
                "vidstabdetect": "vidstabdetect" in filters_result.stdout,
                "vidstabtransform": "vidstabtransform" in filters_result.stdout
            }
            
            info.update({
                "ffmpeg_version": version_line,
                "codecs": {
                    "h264_libx264": h264_available,
                    "aac": aac_available
                },
                "filters": filters_available,
                "capabilities": {
                    "vertical_conversion": True,
                    "background_blur": filters_available["gblur"],
                    "video_stabilization": filters_available["vidstabdetect"] and filters_available["vidstabtransform"],
                    "noise_reduction": filters_available["nlmeans"] or filters_available["hqdn3d"],
                    "sharpening": filters_available["unsharp"],
                    "color_correction": filters_available["eq"],
                    "subtitle_overlay": filters_available["subtitles"],
                    "professional_scaling": filters_available["scale"]
                }
            })
            
        except Exception as e:
            info["ffmpeg_error"] = str(e)
    
    if info["whisper_available"]:
        try:
            # Verificar versi√≥n de Whisper
            result = subprocess.run(['whisper', '--help'], capture_output=True, text=True)
            info["whisper_info"] = {
                "available": True,
                "models": ["tiny", "base", "small", "medium", "large"],
                "languages": ["auto", "es", "en", "fr", "de", "it", "pt", "ja", "ko", "zh", "ar", "ru"],
                "formats": ["srt", "vtt", "txt", "json"]
            }
        except Exception as e:
            info["whisper_error"] = str(e)
    
    # Recomendaciones de instalaci√≥n
    recommendations = []
    if not info["ffmpeg_available"]:
        recommendations.append({
            "component": "FFmpeg",
            "issue": "No est√° instalado",
            "solution": "Instalar FFmpeg desde https://ffmpeg.org/download.html",
            "impact": "Sin FFmpeg no se pueden procesar videos"
        })
    
    if not info["whisper_available"]:
        recommendations.append({
            "component": "OpenAI Whisper",
            "issue": "No est√° instalado", 
            "solution": "Ejecutar: pip install openai-whisper",
            "impact": "Sin Whisper no se pueden generar subt√≠tulos autom√°ticos"
        })
    
    if info["ffmpeg_available"] and not info.get("capabilities", {}).get("video_stabilization", False):
        recommendations.append({
            "component": "VidStab (estabilizaci√≥n)",
            "issue": "Filtros de estabilizaci√≥n no disponibles",
            "solution": "Compilar FFmpeg con --enable-libvidstab o usar una build completa",
            "impact": "La estabilizaci√≥n de video no funcionar√°"
        })
    
    info["recommendations"] = recommendations
    
    return {
        "status": "ok" if info["ffmpeg_available"] else "warning",
        "system_capabilities": info,
        "features_status": {
            "‚úÖ Conversi√≥n a vertical 9:16": info["ffmpeg_available"],
            "‚úÖ Fondo difuminado profesional": info.get("capabilities", {}).get("background_blur", False),
            "‚úÖ Subt√≠tulos autom√°ticos con IA": info["whisper_available"],
            "‚úÖ Reducci√≥n de ruido": info.get("capabilities", {}).get("noise_reduction", False),
            "‚úÖ Mejora de nitidez": info.get("capabilities", {}).get("sharpening", False),
            "‚úÖ Correcci√≥n de color": info.get("capabilities", {}).get("color_correction", False),
            "‚úÖ Estabilizaci√≥n de video": info.get("capabilities", {}).get("video_stabilization", False),
            "‚úÖ Escalado profesional Lanczos": info.get("capabilities", {}).get("professional_scaling", False),
            "‚úÖ Audio con compresi√≥n din√°mica": info["ffmpeg_available"],
            "‚úÖ Optimizaci√≥n multi-plataforma": info["ffmpeg_available"]
        },
        "ready_for_production": info["ffmpeg_available"] and len(recommendations) == 0,
        "setup_recommendations": recommendations
    }

@app.get("/platform-specs")
async def get_platform_specifications():
    """
    üì± Especificaciones t√©cnicas ULTRA AVANZADAS para cada plataforma de video corto
    
    Retorna las especificaciones optimizadas con IA, filtros avanzados y subt√≠tulos autom√°ticos
    """
    return {
        "platforms": {
            "tiktok": {
                "name": "TikTok",
                "resolution": "1080x1920",
                "aspect_ratio": "9:16", 
                "fps": 30,
                "max_duration": "10 minutes",
                "recommended_duration": "15-60 seconds",
                "video_codec": "H.264 High Profile",
                "audio_codec": "AAC 128kbps 48kHz",
                "bitrate": "2500kbps",
                "file_size_limit": "287MB",
                "quality_setting": "tiktok",
                "advanced_features": [
                    "Subt√≠tulos autom√°ticos con IA",
                    "Reducci√≥n de ruido inteligente", 
                    "Mejora de nitidez adaptativa",
                    "Fondo difuminado profesional",
                    "Audio con compresi√≥n din√°mica"
                ]
            },
            "instagram": {
                "name": "Instagram Reels",
                "resolution": "1080x1920", 
                "aspect_ratio": "9:16",
                "fps": 30,
                "max_duration": "90 seconds",
                "recommended_duration": "15-30 seconds", 
                "video_codec": "H.264 High Profile",
                "audio_codec": "AAC 160kbps 48kHz",
                "bitrate": "3200kbps",
                "file_size_limit": "100MB",
                "quality_setting": "instagram",
                "advanced_features": [
                    "Subt√≠tulos autom√°ticos multiidioma",
                    "Correcci√≥n de color profesional",
                    "Estabilizaci√≥n de video",
                    "Escalado Lanczos de alta calidad",
                    "Par√°metros x264 optimizados"
                ]
            },
            "facebook": {
                "name": "Facebook Reels",
                "resolution": "1080x1920",
                "aspect_ratio": "9:16", 
                "fps": 30,
                "max_duration": "90 seconds",
                "recommended_duration": "15-30 seconds",
                "video_codec": "H.264 High Profile", 
                "audio_codec": "AAC 160kbps 48kHz",
                "bitrate": "3200kbps",
                "file_size_limit": "100MB",
                "quality_setting": "instagram",
                "advanced_features": [
                    "Subt√≠tulos autom√°ticos con estilizado",
                    "Filtros de mejora de video",
                    "Optimizaci√≥n para m√≥viles",
                    "Metadatos optimizados para redes sociales"
                ]
            },
            "youtube": {
                "name": "YouTube Shorts",
                "resolution": "1080x1920",
                "aspect_ratio": "9:16",
                "fps": 30,
                "max_duration": "60 seconds", 
                "recommended_duration": "15-60 seconds",
                "video_codec": "H.264 High Profile",
                "audio_codec": "AAC 192kbps 48kHz", 
                "bitrate": "4000kbps",
                "file_size_limit": "256GB",
                "quality_setting": "youtube",
                "advanced_features": [
                    "Subt√≠tulos autom√°ticos de alta precisi√≥n",
                    "Calidad profesional 4Mbps",
                    "GOP size optimizado para streaming",
                    "Keyframes cada 2 segundos"
                ]
            }
        },
        "quality_levels": {
            "low": {
                "description": "Calidad b√°sica - Procesamiento r√°pido",
                "resolution": "720x1280",
                "bitrate": "1200kbps",
                "audio_bitrate": "96kbps",
                "processing_time": "15-20 seconds",
                "use_case": "Prototipos r√°pidos, previsualizaciones"
            },
            "medium": {
                "description": "Calidad balanceada - Recomendado",
                "resolution": "1080x1920", 
                "bitrate": "2800kbps",
                "audio_bitrate": "128kbps",
                "processing_time": "20-30 seconds",
                "use_case": "Contenido general, redes sociales"
            },
            "high": {
                "description": "Alta calidad - Para contenido importante",
                "resolution": "1080x1920",
                "bitrate": "5000kbps",
                "audio_bitrate": "192kbps", 
                "processing_time": "30-45 seconds",
                "use_case": "Contenido profesional, marketing"
            },
            "ultra": {
                "description": "Calidad profesional - M√°xima calidad",
                "resolution": "1080x1920",
                "bitrate": "8000kbps",
                "audio_bitrate": "256kbps",
                "processing_time": "45-60 seconds",
                "use_case": "Producciones profesionales, contenido premium"
            }
        },
        "advanced_features": {
            "automatic_subtitles": {
                "description": "Subt√≠tulos autom√°ticos con OpenAI Whisper",
                "supported_languages": ["auto", "es", "en", "fr", "de", "it", "pt", "ja", "ko", "zh"],
                "accuracy": "95%+ para espa√±ol e ingl√©s",
                "styling": "Profesional con contornos y sombras",
                "additional_time": "+30-60 seconds"
            },
            "video_filters": {
                "denoise": {
                    "description": "Reducci√≥n de ruido inteligente",
                    "algorithm": "NLMeans avanzado",
                    "improvement": "Elimina ruido visual sin perder detalles"
                },
                "sharpen": {
                    "description": "Mejora de nitidez adaptativa",
                    "algorithm": "Unsharp mask con controles finos",
                    "levels": "0.1 - 1.0 (recomendado: 0.3)"
                },
                "stabilization": {
                    "description": "Estabilizaci√≥n de video profesional",
                    "algorithm": "VidStab de dos pases",
                    "effectiveness": "Corrige movimientos de c√°mara"
                },
                "color_correction": {
                    "description": "Correcci√≥n de color profesional",
                    "controls": ["brightness", "contrast", "saturation", "gamma"],
                    "ranges": "Seguros para todas las plataformas"
                }
            },
            "audio_enhancement": {
                "compression": "Compresi√≥n din√°mica profesional",
                "limiting": "Limitaci√≥n de picos autom√°tica",
                "sample_rate": "48kHz profesional",
                "channels": "Est√©reo optimizado"
            }
        },
        "technical_specifications": {
            "encoding": {
                "format": "MP4 Container",
                "video_codec": "H.264/AVC",
                "profile": "High Profile Level 4.2",
                "scaling_algorithm": "Lanczos (mejor calidad)",
                "pixel_format": "YUV420P",
                "color_space": "BT.709"
            },
            "optimizations": {
                "streaming": "Fast start + fragmented MP4",
                "compression": "Par√°metros x264 profesionales",
                "compatibility": "Compatible con todas las plataformas",
                "metadata": "Optimizado para redes sociales"
            },
            "performance": {
                "multi_threading": "Usa todos los cores del CPU",
                "memory_optimization": "Streaming de chunks 1MB",
                "progress_monitoring": "Tiempo real",
                "automatic_cleanup": "Limpieza de archivos temporales"
            }
        },
        "api_usage_examples": {
            "basic_conversion": {
                "description": "Conversi√≥n b√°sica para TikTok",
                "request": {
                    "video_url": "https://example.com/video.mp4",
                    "quality": "tiktok",
                    "platform": "tiktok"
                }
            },
            "advanced_with_subtitles": {
                "description": "Conversi√≥n avanzada con subt√≠tulos",
                "request": {
                    "video_url": "https://example.com/video.mp4",
                    "quality": "high",
                    "platform": "instagram",
                    "add_subtitles": True,
                    "subtitle_language": "es"
                }
            },
            "professional_with_filters": {
                "description": "Conversi√≥n profesional con filtros",
                "request": {
                    "video_url": "https://example.com/video.mp4",
                    "quality": "ultra",
                    "platform": "youtube",
                    "add_subtitles": True,
                    "apply_denoise": True,
                    "apply_sharpen": True,
                    "apply_color_correction": True,
                    "brightness": 0.1,
                    "contrast": 1.2,
                    "saturation": 1.1
                }
            }
        }
    }

@app.post("/process-video")
async def process_video_dynamic(request: OptimizedVideoRequest, background_tasks: BackgroundTasks):
    """
    üöÄ ENDPOINT DIN√ÅMICO ULTRA AVANZADO - Procesa video optimizado con IA y filtros profesionales
    
    Convierte videos a formato vertical 9:16 con caracter√≠sticas ULTRA AVANZADAS:
    
    üé¨ CALIDADES DISPONIBLES:
    - low: 720x1280, bitrate 1.2Mbps (r√°pido, menor calidad)
    - medium: 1080x1920, bitrate 2.8Mbps (balance perfecto)
    - high: 1080x1920, bitrate 5Mbps (alta calidad)
    - ultra: 1080x1920, bitrate 8Mbps (calidad profesional)
    - tiktok: 1080x1920, optimizado para TikTok
    - instagram: 1080x1920, optimizado para Instagram/Facebook
    - youtube: 1080x1920, optimizado para YouTube Shorts
    
    üì± PLATAFORMAS OPTIMIZADAS:
    - TikTok (1080x1920, 30fps, H.264, 2.5Mbps)
    - Instagram Reels (1080x1920, 30fps, H.264, 3.2Mbps)
    - Facebook Reels (usa configuraci√≥n de Instagram)
    - YouTube Shorts (1080x1920, 30fps, H.264, 4Mbps)
    
    üé§ SUBT√çTULOS AUTOM√ÅTICOS CON IA:
    - Generaci√≥n autom√°tica con OpenAI Whisper
    - Soporte para m√∫ltiples idiomas (es, en, fr, de, etc.)
    - Estilizado profesional con contornos y sombras
    
    üé® FILTROS AVANZADOS DE VIDEO:
    - Reducci√≥n de ruido inteligente (denoise)
    - Mejora de nitidez adaptativa (sharpen)
    - Estabilizaci√≥n de video (stabilization)
    - Correcci√≥n de color profesional (brightness, contrast, saturation, gamma)
    
    üîä MEJORAS DE AUDIO:
    - Compresi√≥n din√°mica profesional
    - Limitaci√≥n de picos de audio
    - Sample rate 48kHz profesional
    - Bitrates de audio optimizados por calidad
    
    ‚ö° OPTIMIZACIONES T√âCNICAS:
    - Algoritmo de escalado Lanczos (mejor calidad)
    - Perfiles H.264 optimizados con par√°metros x264 avanzados
    - GOP size y keyframes optimizados para streaming
    - Metadatos optimizados para redes sociales
    - Monitoreo de progreso en tiempo real
    
    üìä EJEMPLO COMPLETO CON TODAS LAS FUNCIONES:
    POST /process-video
    {
        "video_url": "https://storage.asumarket.com/agentetiktok/clip_01K3ZE1Y7MH8CBRQAFR206V4AM",
        "quality": "ultra",
        "platform": "tiktok",
        "add_subtitles": true,
        "subtitle_language": "es",
        "apply_denoise": true,
        "apply_sharpen": true,
        "sharpen_strength": 0.4,
        "apply_color_correction": true,
        "brightness": 0.1,
        "contrast": 1.2,
        "saturation": 1.1,
        "target_fps": 30,
        "audio_enhancement": true
    }
    
    üì¶ RESPUESTA MEJORADA:
    {
        "success": true,
        "video_id": "clip_01K3ZE1Y7MH8CBRQAFR206V4AM",
        "status": "processing",
        "download_url": "/converted-video/clip_01K3ZE1Y7MH8CBRQAFR206V4AM/download",
        "video_url": "/converted-video/clip_01K3ZE1Y7MH8CBRQAFR206V4AM.mp4",
        "status_url": "/converted-video/clip_01K3ZE1Y7MH8CBRQAFR206V4AM/status",
        "processing_options": {
            "subtitles": true,
            "filters_applied": ["denoise", "sharpen", "color_correction"],
            "audio_enhancement": true,
            "estimated_time": "45-90 seconds"
        }
    }
    """
    try:
        # Validar que FFmpeg est√© disponible
        if not check_ffmpeg():
            raise HTTPException(
                status_code=500, 
                detail="FFmpeg no est√° disponible. Instala FFmpeg para usar funciones de conversi√≥n."
            )
        
        # Validar par√°metros
        valid_qualities = ["low", "medium", "high", "ultra", "tiktok", "instagram", "youtube"]
        if request.quality not in valid_qualities:
            raise HTTPException(
                status_code=400,
                detail=f"Calidad no v√°lida. Usa una de: {', '.join(valid_qualities)}"
            )
        
        # Extraer nombre base de la URL (este ser√° el video_id final)
        video_id = extract_filename_from_url(request.video_url)
        
        # Optimizar calidad seg√∫n plataforma
        optimized_quality = optimize_for_platform(request.quality, request.platform)
        
        # Obtener opciones de procesamiento
        processing_options = get_processing_options_from_request(request)
        
        print(f"üé¨ Iniciando procesamiento ULTRA AVANZADO para: {video_id}")
        print(f"üîó URL: {request.video_url}")
        print(f"üéØ Calidad: {request.quality} -> {optimized_quality}")
        print(f"üì± Plataforma: {request.platform}")
        if request.add_subtitles:
            print(f"üé§ Subt√≠tulos autom√°ticos: {request.subtitle_language}")
        
        # Listar filtros que se aplicar√°n
        filters_list = []
        if request.apply_denoise:
            filters_list.append("denoise")
        if request.apply_sharpen:
            filters_list.append(f"sharpen({request.sharpen_strength})")
        if request.apply_stabilization:
            filters_list.append("stabilization")
        if request.apply_color_correction:
            filters_list.append("color_correction")
        
        if filters_list:
            print(f"üé® Filtros aplicados: {', '.join(filters_list)}")
        
        # Verificar si ya existe en cache
        with cache_lock:
            if video_id in video_cache:
                existing_data = video_cache[video_id]
                return {
                    "success": True,
                    "video_id": video_id,
                    "status": existing_data["status"],
                    "download_url": f"/converted-video/{video_id}/download",
                    "video_url": f"/converted-video/{video_id}.mp4",
                    "status_url": f"/converted-video/{video_id}/status",
                    "message": "Video ya est√° en proceso o completado"
                }
        
        # Crear entrada en cache con nuevas opciones
        with cache_lock:
            video_cache[video_id] = {
                "status": "processing",
                "video_url": request.video_url,
                "quality": optimized_quality,
                "platform": request.platform,
                "processing_options": processing_options,
                "filters_applied": filters_list,
                "add_subtitles": request.add_subtitles,
                "created_at": time.time(),
                "file_path": None,
                "file_size": None,
                "conversion_time": None,
                "base_name": video_id
            }
        
        # Procesar video en background con opciones avanzadas
        background_tasks.add_task(
            process_video_background_advanced, 
            video_id, 
            request.video_url, 
            optimized_quality, 
            processing_options
        )
        
        # Estimar tiempo seg√∫n opciones
        estimated_time = "15-30 seconds"
        if request.add_subtitles:
            estimated_time = "45-90 seconds"
        elif len(filters_list) > 2:
            estimated_time = "30-60 seconds"
        
        return {
            "success": True,
            "video_id": video_id,
            "status": "processing",
            "download_url": f"/converted-video/{video_id}/download",
            "video_url": f"/converted-video/{video_id}.mp4", 
            "status_url": f"/converted-video/{video_id}/status",
            "estimated_time": estimated_time,
            "quality": optimized_quality,
            "platform": request.platform,
            "processing_options": {
                "subtitles": request.add_subtitles,
                "subtitle_language": request.subtitle_language if request.add_subtitles else None,
                "filters_applied": filters_list,
                "audio_enhancement": request.audio_enhancement,
                "target_fps": request.target_fps,
                "custom_bitrate": request.custom_bitrate
            },
            "optimizations": {
                "format": "MP4 (H.264 Professional)",
                "resolution": "1080x1920" if "1080" in optimized_quality or optimized_quality in ["high", "ultra", "tiktok", "instagram", "youtube"] else "720x1280",
                "fps": str(request.target_fps),
                "audio": f"AAC {processing_options.get('audio_bitrate', '128k')} 48kHz",
                "advanced_features": [
                    "Fondo difuminado mejorado",
                    "Escalado Lanczos profesional",
                    "Par√°metros x264 optimizados",
                    "Audio con compresi√≥n din√°mica" if request.audio_enhancement else "Audio est√°ndar",
                ] + ([f"Subt√≠tulos autom√°ticos ({request.subtitle_language})"] if request.add_subtitles else []) + filters_list,
                "compatible_platforms": ["TikTok", "Instagram Reels", "Facebook Reels", "YouTube Shorts", "Twitter", "LinkedIn"]
            },
            "message": f"Video ULTRA OPTIMIZADO para {request.platform} con {len(filters_list)} filtros avanzados"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error iniciando procesamiento avanzado: {str(e)}")

async def process_video_background(video_id: str, video_url: str, quality: str):
    """Procesa el video en background (funci√≥n de compatibilidad)"""
    await process_video_background_advanced(video_id, video_url, quality, {})

async def process_video_background_advanced(video_id: str, video_url: str, quality: str, options: dict):
    """Procesa el video en background con opciones avanzadas"""
    temp_dir = None
    try:
        print(f"üé¨ Iniciando procesamiento ULTRA AVANZADO para {video_id}")
        
        # Actualizar estado
        with cache_lock:
            if video_id in video_cache:
                video_cache[video_id]["status"] = "downloading"
        
        # Crear directorio temporal
        temp_dir = tempfile.mkdtemp()
        
        # Usar el video_id directamente como nombre base
        base_name = video_id
        
        # Generar nombres de archivo usando el video_id
        input_filename = f"input_{base_name}.mp4"
        output_filename = f"{base_name}.mp4"  # Nombre final ser√° exactamente el video_id
        
        input_path = os.path.join(temp_dir, input_filename)
        temp_output_path = os.path.join(temp_dir, output_filename)
        
        # Descargar video con headers mejorados
        print(f"‚¨áÔ∏è Descargando video para {video_id}: {video_url}")
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': '*/*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1'
        }
        
        response = requests.get(
            video_url, 
            stream=True, 
            timeout=120,  # Timeout m√°s largo para videos grandes
            headers=headers
        )
        response.raise_for_status()
        
        # Descargar con barra de progreso
        total_size = int(response.headers.get('content-length', 0))
        downloaded = 0
        
        with open(input_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=1024*1024):  # 1MB chunks
                if chunk:
                    f.write(chunk)
                    downloaded += len(chunk)
                    if total_size > 0:
                        progress = (downloaded / total_size) * 100
                        print(f"üì• Descarga: {progress:.1f}%", end='\r')
        
        print(f"\n‚úÖ Descarga completada para {video_id}: {os.path.getsize(input_path) / (1024*1024):.1f} MB")
        
        # Analizar video descargado
        print(f"üìä Analizando video original...")
        video_info = analyze_video(input_path)
        
        # Actualizar estado
        with cache_lock:
            if video_id in video_cache:
                video_cache[video_id]["status"] = "converting"
                video_cache[video_id]["original_info"] = video_info
        
        # Preparar opciones de conversi√≥n con valores por defecto
        conversion_options = {
            "add_subtitles": options.get("add_subtitles", False),
            "subtitle_language": options.get("subtitle_language", "auto"),
            "target_fps": options.get("target_fps", 30),
            "custom_bitrate": options.get("custom_bitrate"),
            "apply_filters": options.get("apply_filters", {})
        }
        
        # Convertir video con opciones avanzadas
        start_time = time.time()
        print(f"üé¨ Convirtiendo video {video_id} con calidad simplificada: {quality}")
        
        # Usar funci√≥n simplificada para evitar bloqueos
        conversion_success = await convert_to_vertical_format_simple(
            input_path, 
            temp_output_path, 
            quality
        )
        
        if conversion_success and os.path.exists(temp_output_path):
            conversion_time = time.time() - start_time
            file_size = os.path.getsize(temp_output_path)
            
            # Analizar video final
            final_info = analyze_video(temp_output_path)
            
            # Calcular estad√≠sticas de mejora
            compression_ratio = video_info.get("bitrate", 0) / final_info.get("bitrate", 1) if final_info.get("bitrate", 0) > 0 else 0
            
            # Actualizar cache con √©xito
            with cache_lock:
                if video_id in video_cache:
                    video_cache[video_id].update({
                        "status": "completed",
                        "file_path": temp_output_path,  # Mantener en temp
                        "file_size": file_size,
                        "conversion_time": conversion_time,
                        "completed_at": time.time(),
                        "temp_dir": temp_dir,  # Guardar referencia al directorio temporal
                        "filename": output_filename,  # Nombre del archivo final
                        "final_info": final_info,
                        "compression_ratio": compression_ratio,
                        "processing_stats": {
                            "original_size": os.path.getsize(input_path),
                            "final_size": file_size,
                            "size_reduction": ((os.path.getsize(input_path) - file_size) / os.path.getsize(input_path)) * 100,
                            "original_resolution": f"{video_info.get('width', 0)}x{video_info.get('height', 0)}",
                            "final_resolution": f"{final_info.get('width', 0)}x{final_info.get('height', 0)}",
                            "original_fps": video_info.get('fps', 0),
                            "final_fps": final_info.get('fps', 0),
                            "filters_applied": len(options.get("apply_filters", {})),
                            "subtitles_generated": options.get("add_subtitles", False)
                        }
                    })
            
            print(f"\n‚úÖ Video {video_id} procesado exitosamente con ULTRA OPTIMIZACI√ìN")
            print(f"‚è±Ô∏è Tiempo total: {conversion_time:.1f}s")
            print(f"üìÅ Archivo final: {file_size / (1024*1024):.1f} MB")
            print(f"üìä Resoluci√≥n final: {final_info.get('width', 0)}x{final_info.get('height', 0)}")
            print(f"üéØ FPS final: {final_info.get('fps', 0):.1f}")
            
            if options.get("apply_filters"):
                print(f"üé® Filtros aplicados: {len(options['apply_filters'])} filtros")
            if options.get("add_subtitles"):
                print(f"üé§ Subt√≠tulos autom√°ticos incluidos")
            
            # NO limpiar temp_dir aqu√≠, se limpiar√° cuando expire el cache
        else:
            # Error en conversi√≥n
            with cache_lock:
                if video_id in video_cache:
                    video_cache[video_id]["status"] = "error"
                    video_cache[video_id]["error"] = "Error en la conversi√≥n del video con configuraci√≥n avanzada"
            
            print(f"‚ùå Error procesando video {video_id} con configuraci√≥n avanzada")
            
            # Limpiar si hay error
            if temp_dir and os.path.exists(temp_dir):
                try:
                    shutil.rmtree(temp_dir)
                except:
                    pass
            
    except Exception as e:
        print(f"‚ùå Error en background avanzado para {video_id}: {e}")
        # Actualizar cache con error
        with cache_lock:
            if video_id in video_cache:
                video_cache[video_id]["status"] = "error"
                video_cache[video_id]["error"] = str(e)
        
        # Limpiar si hay error
        if temp_dir and os.path.exists(temp_dir):
            try:
                shutil.rmtree(temp_dir)
            except:
                pass

@app.get("/converted-video/{video_id}/status")
async def get_video_status(video_id: str):
    """
    Obtiene el estado de un video en procesamiento
    
    Estados posibles:
    - processing: Video en cola de procesamiento
    - downloading: Descargando video original
    - converting: Convirtiendo a formato vertical
    - completed: Listo para descarga
    - error: Error en el procesamiento
    """
    with cache_lock:
        if video_id not in video_cache:
            raise HTTPException(status_code=404, detail="Video ID no encontrado")
        
        video_data = video_cache[video_id].copy()
    
    # Preparar respuesta seg√∫n el estado
    response = {
        "video_id": video_id,
        "status": video_data["status"],
        "quality": video_data.get("quality"),
        "created_at": video_data.get("created_at")
    }
    
    if video_data["status"] == "completed":
        response.update({
            "download_url": f"/converted-video/{video_id}/download",
            "video_url": f"/converted-video/{video_id}.mp4",
            "file_size": video_data.get("file_size"),
            "conversion_time": video_data.get("conversion_time"),
            "ready": True
        })
    elif video_data["status"] == "error":
        response.update({
            "error": video_data.get("error", "Error desconocido"),
            "ready": False
        })
    else:
        # processing, downloading, converting
        response.update({
            "ready": False,
            "message": {
                "processing": "Video en cola de procesamiento",
                "downloading": "Descargando video original...",
                "converting": "Convirtiendo a formato vertical..."
            }.get(video_data["status"], "Procesando...")
        })
    
    return response

@app.get("/converted-video/{video_id}/download")
async def download_converted_video(video_id: str):
    """
    Descarga el video convertido usando su ID
    
    Ejemplo: GET /converted-video/abc123def456/download
    """
    with cache_lock:
        if video_id not in video_cache:
            raise HTTPException(status_code=404, detail="Video ID no encontrado")
        
        video_data = video_cache[video_id].copy()
    
    if video_data["status"] != "completed":
        if video_data["status"] == "error":
            error_msg = video_data.get("error", "Error en el procesamiento")
            raise HTTPException(status_code=400, detail=f"Error en video: {error_msg}")
        else:
            raise HTTPException(
                status_code=202, 
                detail=f"Video a√∫n en procesamiento. Estado actual: {video_data['status']}"
            )
    
    file_path = video_data.get("file_path")
    if not file_path or not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="Archivo de video no encontrado")
    
    # Configurar headers para descarga
    file_size = os.path.getsize(file_path)
    filename = f"vertical_video_{video_id}.mp4"
    
    headers = {
        "Content-Disposition": f"attachment; filename={filename}",
        "Content-Length": str(file_size),
        "Content-Type": "video/mp4"
    }
    
    print(f"üì§ Descargando video convertido: {video_id}")
    
    return StreamingResponse(
        generate_file_stream(file_path),
        media_type="video/mp4",
        headers=headers
    )

@app.get("/converted-video/{video_id}.mp4")
async def stream_converted_video(video_id: str):
    """
    üé¨ ENDPOINT DIRECTO CON URL .mp4 - Sirve el video directamente como archivo binario
    
    URL que termina en .mp4 para visualizaci√≥n directa en navegador
    Ejemplo: GET /converted-video/abc123def456.mp4
    
    Esta URL se puede usar directamente en:
    - <video src="http://localhost:8000/converted-video/abc123def456.mp4">
    - Navegador web para reproducir directamente
    - Apps m√≥viles que esperan URLs de video
    - Reproductores que requieren extensi√≥n .mp4
    """
    with cache_lock:
        if video_id not in video_cache:
            raise HTTPException(status_code=404, detail="Video no encontrado")
        
        video_data = video_cache[video_id].copy()
    
    # Solo servir el video si est√° completado
    if video_data["status"] != "completed":
        if video_data["status"] == "error":
            error_msg = video_data.get("error", "Error en el procesamiento")
            raise HTTPException(status_code=404, detail="Video no disponible")
        else:
            # Si a√∫n est√° procesando, retornar 404 en lugar de mensaje de estado
            raise HTTPException(status_code=404, detail="Video no disponible")
    
    file_path = video_data.get("file_path")
    if not file_path or not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="Video no disponible")
    
    # Headers para streaming de video (sin forzar descarga)
    file_size = os.path.getsize(file_path)
    
    headers = {
        "Content-Length": str(file_size),
        "Accept-Ranges": "bytes",
        "Cache-Control": "public, max-age=3600"  # Cache 1 hora
    }
    
    print(f"üé¨ Sirviendo video como stream: {video_id}.mp4")
    
    return StreamingResponse(
        generate_file_stream(file_path),
        media_type="video/mp4",
        headers=headers
    )

# ============== ENDPOINTS DE KICK API ==============

@app.get("/channel/{channel_name}/clips")
async def get_channel_clips(channel_name: str, limit: Optional[int] = 20):
    """
    Obtiene los clips de un canal espec√≠fico
    """
    try:
        # Obtener informaci√≥n del canal
        channel = await asyncio.to_thread(kick_api.channel, channel_name)
        if not channel:
            raise HTTPException(status_code=404, detail=f"Canal '{channel_name}' no encontrado")
        
        # Obtener clips del canal
        clips = channel.clips
        
        clips_data = []
        for i, clip in enumerate(clips):
            if i >= limit:
                break
            clip_data = {
                "id": clip.id,
                "title": clip.title if clip.title else "Sin t√≠tulo",
                "duration": clip.duration,
                "views": getattr(clip, 'views', 0),
                "view_count": getattr(clip, 'view_count', 0),
                "likes": getattr(clip, 'likes', 0),
                "created_at": clip.created_at,
                "thumbnail_url": clip.thumbnail,
                "download_url": clip.stream,
                "mp4_download": f"/clip/{clip.id}/download/mp4",
                "mp3_download": f"/clip/{clip.id}/download/mp3",
                "clip_url": f"https://kick.com/{channel_name}/clips/{clip.id}",
                "creator": clip.creator.username if clip.creator else None,
                "category": clip.category.name if clip.category else None
            }
            clips_data.append(clip_data)
        
        return {
            "channel": channel_name,
            "total_clips": len(clips_data),
            "clips": clips_data
        }
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al obtener clips: {str(e)}")

@app.get("/channel/{channel_name}/videos")
async def get_channel_videos(channel_name: str, limit: Optional[int] = 20):
    """
    Obtiene los videos (VODs) de un canal espec√≠fico
    """
    try:
        # Obtener informaci√≥n del canal
        channel = await asyncio.to_thread(kick_api.channel, channel_name)
        if not channel:
            raise HTTPException(status_code=404, detail=f"Canal '{channel_name}' no encontrado")
        
        # Obtener videos del canal
        videos = channel.videos
        
        videos_data = []
        for i, video in enumerate(videos):
            if i >= limit:
                break
            video_data = {
                "id": video.id,
                "title": video.title if video.title else "Sin t√≠tulo",
                "duration": video.duration,
                "views": video.views,
                "created_at": video.created_at,
                "updated_at": video.updated_at,
                "thumbnail": video.thumbnail,
                "download_url": video.stream,
                "mp4_download": f"/video/{video.id}/download/mp4",
                "mp3_download": f"/video/{video.id}/download/mp3",
                "video_url": f"https://kick.com/{channel_name}/videos/{video.id}",
                "language": video.language,
                "uuid": video.uuid,
                "live_stream_id": video.live_stream_id
            }
            videos_data.append(video_data)
        
        return {
            "channel": channel_name,
            "total_videos": len(videos_data),
            "videos": videos_data
        }
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al obtener videos: {str(e)}")

@app.get("/clip/{clip_id}")
async def get_clip_by_id(clip_id: str):
    """
    Obtiene informaci√≥n de un clip espec√≠fico por su ID
    """
    try:
        clip = await asyncio.to_thread(kick_api.clip, clip_id)
        if not clip:
            raise HTTPException(status_code=404, detail=f"Clip '{clip_id}' no encontrado")
        
        return {
            "id": clip.id,
            "title": clip.title if clip.title else "Sin t√≠tulo",
            "duration": clip.duration,
            "views": getattr(clip, 'views', 0),
            "view_count": getattr(clip, 'view_count', 0),
            "likes": getattr(clip, 'likes', 0),
            "created_at": clip.created_at,
            "thumbnail_url": clip.thumbnail,
            "download_url": clip.stream,
            "creator": clip.creator.username if clip.creator else None,
            "category": clip.category.name if clip.category else None,
            "channel": {
                "id": clip.channel.id,
                "username": clip.channel.username
            } if clip.channel else None
        }
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al obtener clip: {str(e)}")

@app.get("/clip/{clip_id}/download/{format}")
async def download_clip(clip_id: str, format: str):
    """
    Descarga un clip en formato espec√≠fico (mp4 o mp3)
    """
    if format not in ["mp4", "mp3"]:
        raise HTTPException(status_code=400, detail="Formato no v√°lido. Use 'mp4' o 'mp3'")
    
    if not check_ffmpeg():
        raise HTTPException(status_code=500, detail="FFmpeg no est√° disponible en el servidor")
    
    try:
        clip = await asyncio.to_thread(kick_api.clip, clip_id)
        if not clip:
            raise HTTPException(status_code=404, detail=f"Clip '{clip_id}' no encontrado")
        
        # Crear archivo temporal
        with tempfile.NamedTemporaryFile(delete=False, suffix=f".{format}") as temp_file:
            temp_path = temp_file.name
        
        # Convertir seg√∫n el formato
        if format == "mp4":
            success = await convert_m3u8_to_mp4(clip.stream, temp_path)
        else:  # mp3
            success = await convert_m3u8_to_mp3(clip.stream, temp_path)
        
        if not success:
            os.unlink(temp_path)
            raise HTTPException(status_code=500, detail=f"Error al convertir clip a {format}")
        
        # Configurar headers para descarga
        file_size = os.path.getsize(temp_path)
        filename = f"{clip.title or 'clip'}_{clip_id}.{format}"
        
        headers = {
            "Content-Disposition": f"attachment; filename={filename}",
            "Content-Length": str(file_size)
        }
        
        media_type = "video/mp4" if format == "mp4" else "audio/mpeg"
        
        # Funci√≥n para limpiar archivo despu√©s de la descarga
        def cleanup():
            try:
                os.unlink(temp_path)
            except:
                pass
        
        return StreamingResponse(
            generate_file_stream(temp_path),
            media_type=media_type,
            headers=headers,
            background=cleanup
        )
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al descargar clip en {format.upper()}: {str(e)}")

@app.get("/video/{video_id}/download/{format}")
async def download_video(video_id: str, format: str):
    """
    Descarga un video en formato espec√≠fico (mp4 o mp3)
    """
    if format not in ["mp4", "mp3"]:
        raise HTTPException(status_code=400, detail="Formato no v√°lido. Use 'mp4' o 'mp3'")
    
    if not check_ffmpeg():
        raise HTTPException(status_code=500, detail="FFmpeg no est√° disponible en el servidor")
    
    try:
        video = await asyncio.to_thread(kick_api.video, video_id)
        if not video:
            raise HTTPException(status_code=404, detail=f"Video '{video_id}' no encontrado")
        
        # Crear archivo temporal
        with tempfile.NamedTemporaryFile(delete=False, suffix=f".{format}") as temp_file:
            temp_path = temp_file.name
        
        # Convertir seg√∫n el formato
        if format == "mp4":
            success = await convert_m3u8_to_mp4(video.stream, temp_path)
        else:  # mp3
            success = await convert_m3u8_to_mp3(video.stream, temp_path)
        
        if not success:
            os.unlink(temp_path)
            raise HTTPException(status_code=500, detail=f"Error al convertir video a {format}")
        
        # Configurar headers para descarga
        file_size = os.path.getsize(temp_path)
        filename = f"{video.title or 'video'}_{video_id}.{format}"
        
        headers = {
            "Content-Disposition": f"attachment; filename={filename}",
            "Content-Length": str(file_size)
        }
        
        media_type = "video/mp4" if format == "mp4" else "audio/mpeg"
        
        # Funci√≥n para limpiar archivo despu√©s de la descarga
        def cleanup():
            try:
                os.unlink(temp_path)
            except:
                pass
        
        return StreamingResponse(
            generate_file_stream(temp_path),
            media_type=media_type,
            headers=headers,
            background=cleanup
        )
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al descargar video en {format.upper()}: {str(e)}")

@app.get("/video/{video_id}")
async def get_video_by_id(video_id: str):
    """
    Obtiene informaci√≥n de un video espec√≠fico por su ID
    """
    try:
        video = await asyncio.to_thread(kick_api.video, video_id)
        if not video:
            raise HTTPException(status_code=404, detail=f"Video '{video_id}' no encontrado")
        
        return {
            "id": video.id,
            "title": video.title if video.title else "Sin t√≠tulo",
            "duration": video.duration,
            "views": video.views,
            "created_at": video.created_at,
            "updated_at": video.updated_at,
            "thumbnail": video.thumbnail,
            "download_url": video.stream,
            "language": video.language,
            "uuid": video.uuid,
            "live_stream_id": video.live_stream_id,
            "channel": {
                "id": video.channel.id,
                "username": video.channel.username
            } if video.channel else None
        }
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al obtener video: {str(e)}")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
